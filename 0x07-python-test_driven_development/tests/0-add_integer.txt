=============================
TEST FOR 0-add_integer MODULE
=============================

import module
::
	>>> add = __import__('0-add_integer').add_integer

Test integers
::
	>>> add(1, 1)
	2
	>>> add(-1, 1)
	0
	>>> add(0, 0)
	0
	>>> add(1, -0)
	1
	>>> add(0, 1)
	1
	>>> add(1, ++-45)
	-44


Test floats
::
	>>> add(1.0, 1.2)
	2
	>>> add(1.3, -1.9)
	0
	>>> add(-1.0698, -1)
	-2
	>>> add(0, 0.895069)
	0
	>>> add(1.95745, 0.8456786)
	1
	>>> add(0.438396, 1.09458)
	1


Test large numbers
::
	>>> add(10**1000, 10.2**100)
	


test special numbers
::
	>>> add(0xFF, 0b101000101)
	580
	>>> add(0b1010101100, 0o21636477)
	4669419


Test boolean
::
	>>> add(True, 5)
	Traceback (most recent call last):
	TypeError: a must be an integer
	>>> add(5, False)
	Traceback (most recent call last):
	TypeError: b must be an integer


Test incorrect input
::
	>>> add(1, "word")
	Traceback (most recent call last):
	TypeError: b must be an integer
	>>> add(1, [1, 2])
	Traceback (most recent call last):
	TypeError: b must be an integer
	>>> add({1, 2}, 1)
	Traceback (most recent call last):
	TypeError: a must be an integer
	>>> add(3, None)
	Traceback (most recent call last):
	TypeError: b must be an integer
	>>> add(None, 3)
	Traceback (most recent call last):
	TypeError: a must be an integer
	>>> add(01, -1)
	Traceback (most recent call last):
	SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers


Test float overflow
::
	>>> add(1.0, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer


Test Nan
::
	>>> add(float('nan'), 1)
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer


Test too many arguments
::
	>>> add(1, 3, 45)
	Traceback (most recent call last):
	TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given


Test no arguments
::
	>>> add()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'


Test one argument
::
	>>> add(1)
	99
	>>> add(1,)
	99
	>>> add(, 1)
	Traceback (most recent call last):
	SyntaxError: invalid syntax
